require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const { Bot, session, InlineKeyboard } = require("grammy");

const { registerCommand, start } = require("./commands/start");
const { handleGroupSelection } = require("./handlers/handleGroupSelection");
const { handleTextMessages } = require("./handlers/textMessages");
const { yesHandler } = require("./handlers/yesHandler");
const { noHandler } = require("./handlers/noHandler");
const { handleBotError } = require("./handlers/errorHandler");
const { myEvents } = require("./handlers/myEvents");
const { goToSite } = require("./handlers/goToSite");
const { showMainMenu } = require("./commands/showMainMenu");
const { groupsCommand } = require("./commands/groups");
const { User } = require("./models/userModel");
const { Group } = require("./models/groupModel");

const app = express();
app.use(bodyParser.json());
const port = process.env.PORT || 3000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose
  .connect(process.env.DB_HOST)
  .then(() => console.log("Database connected"))
  .catch((err) => console.error("Database connection error:", err));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);
bot.use(
  session({
    initial: () => ({ stage: null, messageText: "", selectedGroupId: null }),
  })
);
const adminId = 1007855799;

// –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.command("register", registerCommand);

bot.hears("üîç –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",  handleGroupSelection);

bot.hears("üìù –ú–æ–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è", myEvents);

bot.hears("üåç –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", goToSite);

bot.hears("–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º", (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.");
});

bot.hears("üìù –ù–∞–ø–∏—Å–∞—Ç—å 1 –≥—Ä—É–ø–ø–µ", handleGroupSelection);

bot.on('message', async (ctx) => { /// –∫–æ–≥–¥–∞ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ bot.on('message', ...), —Å–æ–±—ã—Ç–∏–µ message —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  sendMessage(ctx);    /// —Ç—É—Ç –º—ã –ø–∏—à–µ–º –í–°–ï–ú
  ctx.session.selectedGroupId = ""; 
});

bot.command("start", start);

bot.on("callback_query:data", async (ctx) => {
  ///callback_query:data - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
  const data = ctx.callbackQuery.data;
  if (data === "register") {
    await registerCommand(ctx);
  } else if (data === "startwork") {
    await showMainMenu(ctx);
  } else if (ctx.session.stage = "nearest_training") {

    try {
      ctx.session.selectedGroupId = data; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID 
      groupsCommand(ctx);
    } catch (error) {
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
    }
  } else if (ctx.session.stage = "waiting_for_message") {
    try {
      ctx.session.stage = "waiting_for_message";
      ctx.session.selectedGroupId = data; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
      ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.`);
      sendMessage(ctx); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    } catch (error) {
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
    }
  } else if (data === "accept_training") {
    await yesHandler(ctx);
  } else if (data === "cancel_training") {
    await noHandler(ctx);
  } else {
    await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.");
  }
});

bot.callbackQuery("cancel_training", noHandler);
bot.on("message:text", handleTextMessages);
bot.catch(handleBotError);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
(async () => {
  await bot.init(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

  app.post("/webhook", (req, res) => {
    console.log("Received update:", req.body);
    bot.handleUpdate(req.body);
    res.sendStatus(200);
  });

  app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
  });
})();















const writeToOneGroup = async (ctx) => {
  try {
    const groups = await Group.find({});

    if (groups.length === 0) {
      return ctx.reply("ü§î –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø.");
    }

    const rows = groups.map((group) => [
      {
        text: `–ù–∞–ø–∏—Å–∞—Ç—å ${group.title}`,
        callback_data: group._id, /// JSON.stringify({ id: group._id, title: group.title }),
      },
    ]);
    const groupKeyboard = new InlineKeyboard(rows);

    await ctx.reply("üìã –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É:", {
      reply_markup: groupKeyboard,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø:", error);
    await ctx.reply("üö® –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø.");
  }
};

const sendMessage = async (ctx) => {
  if (ctx.session.stage === "waiting_for_message") {
    const messageText = ctx.message.text;

    if (!messageText) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.");
    }

    ctx.session.messageText = messageText; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.stage = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —ç—Ç–∞–ø

    try {
      const selectedGroupId = ctx.session.selectedGroupId; // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
      let users;

      if (selectedGroupId) {
        const group = await Group.findById(selectedGroupId);
        if (group) {
          users = group.participants; // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        } else {
          return ctx.reply("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }
      } else {
        users = await User.find({ telegramId: { $exists: true } });
      }

      for (let user of users) {
        try {
          await ctx.api.sendMessage(user.telegramId, messageText); // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        } catch (err) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${user.telegramId}:`,
            err
          );
        }
      }
      if (selectedGroupId) {
        ctx.reply(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã`);
      } else {
        ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.");
      }
     // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.");
    } finally {
       ctx.session.selectedGroupId = ""; 
    }
  }
};
