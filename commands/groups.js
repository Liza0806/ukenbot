const { Event } = require("../models/eventModel");
const moment = require("moment");
const { InlineKeyboard } = require("grammy");
const { Group } = require("../models/groupModel");

async function groupsCommand(ctx, groupId) {
  try {
    const now = moment().toISOString(); // .toISOString() !!!!

    // –ó–∞–ø—Ä–æ—Å –≤ MongoDB –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ groupId
    const upcomingEvent = await Event.find({
      groupId: groupId, 
      isCancelled: false, 
      date: { $gt: now }, // –î–∞—Ç–∞ –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–π
    })
      .sort({ date: 1 })
      .limit(1)
      .exec(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é) –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ

    if (upcomingEvent.length === 0) {
      ctx.reply("–ù–µ—Ç –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã");
      return;
    }

    ctx.session.selectedGroupId = upcomingEvent[0].groupId; // —ç—Ç–æ –¥–ª—è yesHandler, –Ω–µ —É–¥–∞–ª—è–π
    ctx.session.nextEventId = upcomingEvent[0]._id; // —ç—Ç–æ –¥–ª—è yesHandler, –Ω–µ —É–¥–∞–ª—è–π

    const inlineKeyboard = new InlineKeyboard()
      .text("‚úÖ –ü–æ–π–¥—É", "accept_training")
      .text("üö´ –ù–µ –ø–æ–π–¥—É", "cancel_training");

    await ctx.reply(
      `üìÖ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç ${upcomingEvent[0]?.date}. –ü–æ–π–¥–µ—à—å?`,
      {
        reply_markup: inlineKeyboard,
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.");
  }
}

module.exports = { groupsCommand };
