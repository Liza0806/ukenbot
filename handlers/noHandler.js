const { InlineKeyboard } = require("grammy");
const { Group } = require("../models/groupModel");
const { User } = require("../models/userModel");
const { Event } = require("../models/eventModel");
const {
  deleteMessageAfterDelay,
} = require("../helpers/deleteMessageAfterDelay");

async function noHandler(ctx) {
  let replyMessageIds = [];

  try {
    const userId = ctx.from.id.toString();
    const user = await User.findOne({ telegramId: userId }).exec();
    if (!user) {
      const reply = await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üòï");
      replyMessageIds.push(reply.message_id);
      return;
    }
    const group = await Group.findById(ctx.session.selectedGroup).exec();
    if (!group) {
      const reply = await ctx.reply("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòï");
      replyMessageIds.push(reply.message_id);
      return;
    }

    const event = await Event.findById(ctx.session.nextEvent);
    if (!event) {
      const reply = await ctx.reply("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï");
      replyMessageIds.push(reply.message_id);
      return;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
    event.participants = event.participants.filter((p) => p.id !== userId);
    await event.save();

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.visits = user.visits.filter((v) => v.eventId !== event._id);
    await user.save();

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const cancelTrainingKeyboard = new InlineKeyboard().text(
      "–í—Å–µ-—Ç–∞–∫–∏ –ø–æ–π–¥—É üí™",
      "accept_training"
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const reply = await ctx.reply(
      `–î–∞–∂–µ —É —Å–∞–º—ã—Ö —Å–∏–ª—å–Ω—ã—Ö –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –º–∏–Ω—É—Ç—ã —Å–ª–∞–±–æ—Å—Ç–∏! üòî –¢—ã –Ω–µ –∏–¥–µ—à—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ${ctx.session.nextEventDate} –≤ ${ctx.session.nextEventTime} –≤–º–µ—Å—Ç–µ —Å –≥—Ä—É–ø–ø–æ–π ${ctx.session.groupTitle}.`,
      {
        reply_markup: cancelTrainingKeyboard,
      }
    );
    replyMessageIds.push(reply.message_id);
  } catch (error) {
    const errorMessage = await ctx.reply(
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞—Å –∏–∑ —Å–æ–±—ã—Ç–∏—è ‚ö†Ô∏è"
    );
    replyMessageIds.push(errorMessage.message_id);
    deleteMessageAfterDelay(ctx, replyMessageIds, 500);
  }
}

module.exports = { noHandler };
