const { InlineKeyboard } = require("grammy");
const replyWithError = require("../helpers/replyWithError");
const getEventById = require("../helpers/getEventById");
const getUserByTelegramId = require("../helpers/getUserByTelegramId");
const addUserToEvent = require("../helpers/addUserToEvent");

async function yesHandler(ctx) {
  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  const cancelTrainingKeyboard = new InlineKeyboard().text(
    "–û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üõë",
    "cancel_training"
  );

  try {
    await ctx.answerCallbackQuery();

    const event = await getEventById(ctx.session.nextEventId);
    if (!event) return replyWithError(ctx, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï");

    const userId = ctx.from.id.toString();
    const user = await getUserByTelegramId(userId);
    if (!user) return replyWithError(ctx, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üòï");

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if (!user.groups.includes(ctx.session.selectedGroupId)) {
      user.groups.push(ctx.session.selectedGroupId);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–±—ã—Ç–∏–µ
    const isUserAdded = await addUserToEvent(
      user,
      event,
      ctx.session.selectedGroupId
    );
    if (!isUserAdded) {
      return await ctx.reply("–ë–æ–µ—Ü, —Ç—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üí™", {
        reply_markup: cancelTrainingKeyboard,
      });
    }
    await ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∏–¥–µ—à—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üéâ`, {
      reply_markup: cancelTrainingKeyboard,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:", error);
    await replyWithError(
      ctx,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—Å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ ‚ö†Ô∏è"
    );
  }
}

module.exports = { yesHandler };
