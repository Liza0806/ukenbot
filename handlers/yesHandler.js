const { Group } = require("../models/groupModel");
const { User } = require("../models/userModel");
const { Event } = require("../models/eventModel");
const { InlineKeyboard } = require("grammy");
const {
  deleteMessageAfterDelay,
} = require("../helpers/deleteMessageAfterDelay");

async function yesHandler(ctx) {
  let replyMessageIds = [];

  try {
    const userId = ctx.from.id.toString();
    const user = await User.findOne({ telegramId: userId }).exec();
    if (!user) {
      const reply = await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üòï");
      replyMessageIds.push(reply.message_id);
      return deleteMessageAfterDelay(ctx, replyMessageIds, 500);
    }
    if (!user.groups.includes(ctx.session.selectedGroup)) {
      user.groups.push(ctx.session.selectedGroup);
    }
    const group = await Group.findById(ctx.session.selectedGroup).exec();
    if (!group) {
      const reply = await ctx.reply("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòï");
      replyMessageIds.push(reply.message_id);
      return deleteMessageAfterDelay(ctx, replyMessageIds, 500);
    }
    const event = await Event.findById(ctx.session.nextEvent);
    if (!event) {
      const reply = await ctx.reply("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï");
      replyMessageIds.push(reply.message_id);
      return deleteMessageAfterDelay(ctx, replyMessageIds, 500);
    }
    const isAlreadyParticipant = event.participants.some(
      (p) => p.id === userId
    );
    if (isAlreadyParticipant) {
      const reply = await ctx.reply("–ë–æ–µ—Ü, —Ç—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üí™");
      replyMessageIds.push(reply.message_id);
      return deleteMessageAfterDelay(ctx, replyMessageIds, 5000);
    }

    event.participants.push({ id: userId, name: user.name });
    await event.save();

    user.visits.push({
      date: event.date,
      groupId: ctx.session.selectedGroup,
      eventId: ctx.session.nextEvent,
    });
    await user.save();

    const cancelTrainingKeyboard = new InlineKeyboard().text(
      "–û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üõë",
      "cancel_training"
    );

    await ctx.reply(
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∏–¥–µ—à—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ${ctx.session.nextEventDate} –≤ ${ctx.session.nextEventTime} –≤–º–µ—Å—Ç–µ —Å –≥—Ä—É–ø–ø–æ–π ${ctx.session.groupTitle} üéâ`,
      {
        reply_markup: cancelTrainingKeyboard,
      }
    );

    deleteMessageAfterDelay(ctx, replyMessageIds, 500);
  } catch (error) {
    const reply = await ctx.reply(
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—Å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ ‚ö†Ô∏è"
    );
    replyMessageIds.push(reply.message_id);
    deleteMessageAfterDelay(ctx, replyMessageIds, 500);
  }
}

module.exports = { yesHandler };
