const { Event } = require("../models/eventModel");

async function myEvents(ctx) {
  const userId = ctx.from.id.toString();

  try {
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();
    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString();

    const events = await Event.find({
      "participants.id": userId,
      date: { $gte: startOfMonth, $lte: endOfMonth },
    });

    if (events.length === 0) {
      await ctx.reply("ü§î –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.");
      return;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    const eventList = events
      .map((event, index) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç Date
        const eventDate = new Date(event.date);
        const formattedDate = eventDate.toLocaleDateString("ru-RU", {
          day: "2-digit",
          month: "2-digit",
          year: "2-digit",
        });
        const dayOfWeek = eventDate.toLocaleDateString("ru-RU", { weekday: "long" });

        return `${index + 1}. ${formattedDate}, ${dayOfWeek} (${event.groupTitle})`;
      })
      .join("\n");


    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply(
      `–í–æ—Ç —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n${eventList}\n\n–í—Å–µ–≥–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ç—ã –±—ã–ª –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö ${events.length} —Ä–∞–∑.`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:", error);
    await ctx.reply("üö® –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.");
  }
}

module.exports = { myEvents };
